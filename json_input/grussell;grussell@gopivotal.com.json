{"contentItems": [{"content": "Custom conversion is broken. If the custom does not match any of those in then the channel configuration fails with The code needs to consult custom converters to see what (s) they support - and the output Java type. See. Rabbit Bus: Expose on. Related to XD-2567 which fixed this problem, but only in the bus. WARN - skipping header since it is not of expected type , it is. PubSub consumers can support concurrency since the threads are competing consumers on the queue.. For some reason, the Integration is not preventing the standard context from exporting the . This should be suppressed (when an IMBE is present) because it's annotated . Causes . Workaround in the stack overflow answer. Could be an SI issue, but investigation needed. However, we should probably include the stream job name in all MBeans for the stream (as is done for the integration exporter).. 2 Exchanges left behind.. When the is defined as a , the output channel must be set on the handler, not in the annotation. The handler should detect a . See. Also Spring Framework Spring AMQP Also Batch. This deprecated in SI Use in instead. Not that this can safely be done in - the preferred mechanism is available in SI too.. Expose Retryable Exceptions in the Retry Configuration. As a developer, I would like to be able to configure which exceptions thrown by a module should be retryable within the . As usual, these should be configurable at the bus and or stream deployment property level. Also consider disabling retry for kryo problems. We are running Spring XD with RabbitMQ transport and we'd like to have a way to stop retries in certain situations. In , in chapter about RabbitMQ transport, in \"A Note About Retry\" section, it's written: Message deliveries failing with a (perhaps when using a custom are never retried; the assumption being that if a message could not be converted on the first attempt, subsequent attempts will also fail. Following is unclear: Are we speaking about or ? Based on XD-1597 and AMQP-390 it's the latter. Only is available for custom module developers. Attempting to throw which is provided by results in even after Spring XD is configured to use transport. Throwing from custom processor module written with Spring Integration's or doesn't stop retries.. The uses the Integration Scheduler to run batch jobs Launching batch jobs with the uses the Integration default which only has 10 threads by default. Use the instead to free up the scheduler threads. However, we need to consider whether a separate configuration is needed to limit the number of batch jobs - it's possible the existing bus utor configuration is enough.. LocalMessageBus Will Only Run 10 Jobs by Default. This error surfaced recently as a result of a fix to a bug in which disabled this test in all environments. Now the test has been reactivated it is failing on the branch. The test runs OK on master.. This should probably be changed to: Documentation:. STS Gradle Import Missing Dependencies without Enabling Scala. Clear documentation of how to add needed dependencies for using in an XD stream.. Thanks to Gary I found this little gem of documentation to be able to use xpath expression in XD. Only hiccup is that I had to also add the to the classpath (otherwise it is missing XPathException class).. Add the Dependencies Required to Use xpath in Streams. Since the message-driven adapter uses a , the default behavior is to lose messages on exceptions (with the DMLC, the message is ack'd before the listener is invoked). In order to provide recovery of such situations, the source needs to expose so it can be set to . Or, perhaps, given that we don't expose complex configuration, the source should use a instead (where the ack is sent after the listener is successfully invoked).. Currently, you cannot suppress (or change) the prefix on user-defined headers. See Add $ property.. \"trackHistory\" is an optional attribute * -Tab on shell should list. See With set with back-whacks, it fails on with set with whacks, it fails with . The StackOverflow failure is similar. works fine.. An additional commit ( for XD-2230 was applied only to master; it needs to be backported to. I believe it is being cause by the following PR: XD-2381: Split MessageBus and Analytics dependencies from DIRT PR: 1307 SHA:. Here is the full exception: Dispatcher has no subscribers for channel nested exception is Dispatcher has no subscribers and here is that stream: filter router Gary Russell: This looks like another (not fixed by the previous fix) timing problem with taps when using singlenode. The tap is started before the tap stream is deployed. But it's not clear to me how the filter module could be deployed bound as a consumer before the Gary Russell: I see the problem: binds the consumer before the producer - this is the wrong order for a passive component such as the filter. cc. When establishing the tap, we create the tap channel and add the WireTap before the tap channel has been bound to the bus. ERROR - Dispatcher has no subscribers for channel nested exception is Dispatcher has no subscribers at. Upgrade to Spring SI SA. Add a Retry Dead Letter Interceptor to the RabbitMQ Source. Provide for retry and or dead-lettering for the rabbit source (similar to the rabbit message bus).. It is documented here But maybe it should also be at the top of the appendix?. The JMS Source Sink has a pluggable provider (default ) but the URL property implies activeMQ - the property name should be generic (found while testing XD-1149).. Add Support for addresses Property on RabbitMQ Source. Documentation for data partitioning, and all Rabbit Bus properties. Remove from tcp Source; Add Binary Support to the http Source. The TCP source converts to String. This prevents binary transfers. Remove the transformer; if the user wants a String; (s)he can use (assuming the byte stream has valid UTF-8 encoding). Another option would be to add a option, but since conversion can already handle it, it's probably better to use that. On the other hand, a option would enable backwards compatibility. The http source also converts to String.. Allows looking at message headers without turning on debugging.. XD-1019 added simple (stateless) retry to the message bus. Use stateful retry and an enabling failed messages to be requeued on the broker until successful (perhaps because another instance can handle the message); also provides a mechanism to route failed messages to a dead-letter exchange. Requires setting the message id header in bus-generated messages. Also add profiles and properties for common retry backoff policies.. If the rabbit source receives a message it can't convert, a is thrown and the message is rejected (and requeued), causing an endless loop. Add an to the inbound adapter to detect and convert to . Also consider adding a retry interceptor to do the same for exceptions in modules (when using local transport).. Update to Spring AMQP. tx-size, concurrency etc.. Update Spring-AMQP to to. For some reason, the partitioned batch jobs are storing s in the DB with a null ID. This causes to fail because the HATEOS code asserts not For some reason, the query for objects with the also returned these two objects with null keys. Blowing away my data directory fixes the problem (until I run another partitioned batch job). I need to figure out why spring batch is creating these bad records, but we should probably add some defensive code to protect against null IDs. You can reproduce by building against my XD-1146 branch.. Migrate to SI Redis Queue and Topic Adapters. When INT-3133 is resolved, SpEL s are inherited from parent contexts. Instead of adding the to each module's context, add it to the parent instead.. Move SpEL to Module Parent Context. Fix Javadoc and Compiler Warnings. and . references and is referenced by (and stopped).. Taps are currently source modules. They could be refactored to simply bridge the tapped module's tap pub sub topic directly (with conversion) to the first tap module's input channel. Note - ensure destroy works. Currently the tap is destroyed by the simple fact it is a module; if it's no longer a module we'll need special handling to stop remove the tap adapter.. Factor out common Redis Rabbit code. Also, factor out common inbound tap code (very similar). Change transport nternals to Use instead of and .. Revert XD-624 When SI is Available. When importing Spring-XD as a gradle project, in STS, while building the model, we get Root exception: Project location doesn't exist: . gradlew eclipse creates these directories, but the plugin needs them before running that task The problem seems to be that these \"projects\" are not really projects. Perhaps a quick fix would be to commit these directories (with a dummy file) ??. As a user, I'd like to have the option to delete the queues topics so that we can include an optional attribute as part of the stream destroy command to also clean-up the associated queues topics. Consider the possibility of producers and or queues still containing data Some Further Thoughts Consider using the upcoming Spring AMQP REST API if the timing is not right, we could temporarily invoke the rabbit REST API directly. Should this be done by the admin? Or, via a new plugin handling module undeployments - in the rabbit case, undeploying a consumer would check for us being the last consumer and remove the since we undeploy left- right, everything can be cleaned up on the consumer side. Down side of doing it on the admin is that he wouldn't necessarily know which rabbit cluster a stream was deployed to - so it probably has to happen on the container - even so, we'd need the admin url(s) for the cluster.. stats (Message send receive counts, avg ution time, queue stats, error rates, job stats, etc) Metrics exposed in JMX and JSON through Jolokia? Existing monitoring tool for visualization and reporting vs custom dashboard TODO what makes sense as auto-responses to control actions? Auto-scaling of XD nodes, more fine-grained message queue throttling, etc Expose metrics of interest to the internal workings of XD, particularly in transport mechanism Should be doable with external monitoring system Trace individual messages, average message throughput would be interesting to end users too if not too expensive to trace Don't want to get too far into replacing a profiler Way to hook into the module-grouped metric exports. Epic For Distributed Monitoring Stories. results in the following stack trace in the DEBUG log. It's apparently benign, but. Parameter parsing does not work if an argument contains ' For example: Also, I was surprised that this but this I think we need to tokenize the argument (with ' if contains spaces) and remove any surrounding from the result. This means if someone wants a SpEL literal they would have to use something like resulting in a SpEL literal 'Hello, world!'. The calls before the context has had its attached. This can cause issues with s with placeholders in constructor args because the unresolved placeholder is used when the is to determine the type of object it will serve up.. Add JUnit so Tests Fail Fast with Clear Messaging if Redis Not Available. ", "contenttype": "application/json", "created": 737603, "id": 0, "language": "en", "user_name": "grussell", "email": "grussell@gopivotal.com"}]}