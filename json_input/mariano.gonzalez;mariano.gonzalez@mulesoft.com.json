{"contentItems": [{"content": "Loading Interface Metadata type with adds inexistent fields to the MetadataType.. Spike on supporting parameters to have a provider for a dynamic list of possible values. Provide an equivalent in SDK. Extensions should be able to import TopLevel parameters from other extensions. Allow config level components in the Extensions API. When an extension has several configuration models available, there's often the need to have operations, connection providers or even sources which can only function with a subset of those This is currently not possible. We need to be able to: The sources, providers and operations available to a configuration are those defined at its own level + the ones defined at the extension level Going back to the example above, if is only referenced by configuration A, it should be possible to write such operations depending on A exclusively, making it no longer necessary for A to share any kind of type abstraction with B or C. Consider the following code: If the paremeter had some specific optional value, it would make sense for the created there to be overriden. However, if it defaults to null, it's not from a UX perspective to force the user into implementing Initialisable and doing the there. That value should be respected when the optional is null.. Currently when creating an extension, the annotation is mandatory, we should specify at least the namespace of the extension. If the annotation is not present, this error is thrown diagnostic: error: xml model property cannot be null. Instead of creating a validator for avoiding this error, we must implement a default behaviour for the annotation when it is not present. The behavior should be that: 1) The annotation can be either completely absent or present but with all optional parameters 2) The namespace attribute will be derived from the extension name by transforming to lower case, removing all occurrences of the \"connector\" String and hyphenizing 3) The schemaLocation should default to where is replaced by the namespace value 4) The schemaVersion should default to the Major and minor components of the Semver extension version, without classifiers. For example: should translate to. If the annotation is not present, the extension should not fail.. Remove module from the Mule 4 project. Remove devkit-support module. The following are missing and should be added: Validate that all configuration models can be used with all operation models. This comes to the fact that an operation can require a connection type for which the available connection providers might be incompatible with certain configs Validate clashes on fields Validate that all connection providers have different names. Hint the user into using the annotation to customize the provider's names.. Implement connection validation policy on Ext-Api. Passing a JaxB annotated pojo to the HTTP listener response is throwing a transformer error. Should be able to fetch prototype by name without lifecycle applied. In most scenarios, when a prototype is lookup up by name, lifecycle should be applied to it before returning. There're some scenarios fetching a that will go into a which are not so and we need a way to specify that this case is different. The following method was applied to the to support such case:. Reverse the semmantics of MULE-8415. The flag introduced in MULE-8415 disables dependency injection for devkit components. We need it to be other way around. By default, Mule is not to inject into Devkit and the property is to be renamed to and only when set to true devkit will be considered into DI.. This issue is fixed by MULE-8501. Validate that Pojo attributes are not composites. When a pojo is used as a parameter in an Extension, XSD support is generated to allow users define the instance on the XML. However, this won't work if the object is a composite. The composite fields should be skipped when generating the XSD support.. Spike on on inferring extension version from project version. Currently, the annotation includes a version attribute which is used to specify an extension version. However, it's undesirable to have the need to upgrade the version of every extension each time that a new version is released. A mechanism should be defined for the extension version to be automatically inferred from the underlying $. There should still be a way to fix the extension version arbitrarily. Implement a solution to automatically infer supported schema versions for XML compatible extensions. Currently the ext-api is creating a new instance of the operation implementation for each event. That is very confortable for the user, but it has performance considerations associated to garbage collection and the new to perform dependency injection all the time. We need to move to a schema in which: The Class holding the method annotated with needs to have a constructor which receives a single argument which is the configuration to use. Failure to provide such a constructor which result in the application not starting This also means that it will no longer be valid to obtain things like the MuleEvent through a annotation, you have to receive it a method argument, which means that the invoker needs a refresh too. Review and merge MULE-7588. Review and merge MULE-7588. OAuth2 with an expired token fails even if token was refreshed. Implement a validations extensions following the spec defined in MULE-8216. Make a Spike on consolidating all mule registries into a Spring one. Make a Spike on consolidating all mule registries into a Spring one. Per the Queue contract, when a queue is disposed all its storage is to be freed and the resources released. However, it is only clearing the storage but the file handlers remain open. I have verified that the number of files in the queuestore directory in .mule grows constantly. Checked with lsof -p Code is in github at. should ignore documentation namespace. Classes like register the pre processor: Now this preprocessor validates that only one attribute is present in this element. While this implementation seems o be correct it also stops me from adding any other attribute even though it belongs to a different namespace. For instance: This definition fails and I'm only adding an Here is the exception : The attribute 'class' cannot appear with the attribute 'name' in element Please check attached the full xml to reproduce. Could you please modify the implementation of to support this?. should return the name of the application that triggered it. When the Agent receives a transaction Notification there is no way to know the name of the application. Replace the Builders with a fluent API at an or Describer level. A mockup to take as reference (not commitment) of what we're shooting for is this: This should improve usability and reduce the complexity of our own code since now the builder implementation is part of the API. Upgrade Saxon to. Upgrade Saxon in order to get fully compliant and basic support for XPath, XSLT and XQuery. When doing OAuth with Connectors created by DevKit it's possible to define a connector-ref attribute and reference the that will listen for the OAuth callbacks. This is the way in which current Devkit connectors allow support for https on the callback. This should integrate with the new connector in the following way: If no connector is specified, but the configuration flag is turned on, then we default to the old transport * If a connector-ref is specified, then it should show the same behaviour with either the new connector or the old transport. Add a system property named which forces a console appender if one is not already defined on the current log4j configuration. The purpose of this is to enable other products such as Studio to always have a predictable way to capture all the logs of the application regardless (and without tampering with) its configuration. This is something additive to the configuration already present for the application (if any). It doesn't altere the standard configuration selection nor log separation performed in standard mode. the property has precedence over this property. If it is specified, then all the logic described here will not be uted.. The following apache commons libraries can be upgraded. commons-dbcp * commons-net. VM fails in getSize() when log level DEBUG. log4j was release and it contains some fixes, some of which we requested. We should upgrade. We need to upgrade to log4j2 ir oder to leverage the performance improvements of asynchronous logging.. Remove unsued configuration builders. We have code to support creating a mule flow service using a jruby script, groovy or Guice. The actual creating of the script requires advance knowledge of mule internals and it's not useful. Nobody is using it and also we don't support it in our IDE. We should only keep the spring configuration builders. Database bulk operations don't work with objects that don't implement Collection. The update bulk operation of the database module fails with collections that implement Collection but not Iterable. This causes a problem with Connector Query results which are usually Iterable or Iterator to allow lazy loading results, yet not implementing the Collection interface.. Mule fails to start if has a persistent object store with stored events. Consider the attached application. The mule event is persisted successfully when entering the block but upon an unexpected restart of the mule instance, the message could not be de-serialized again and an error in the logger is displayed with the following line: ERROR Could not restore partition under directory This happens because when the object store is open, it tries to cache the keys. Because the MuleEvent has a reference to its owning flow construct, a circular reference is created since the deserialized event tries to fetch the flow construct which triggered its loading. Steps to reproduce: Run the attached app and an ActiveMQ instance. Stop activeMQ place a non-empty file in (you may configure a more convenient folder). stop mule start activemq start mule Observe the logger line Observe that the message that should have been recovered from the persistent object store is not delivered to the broker. Expected behavior: Persistent object store should lazily cache its entry upon its first use. Workaround: Temporal workaround until this gets fixed is to set the lazy-init property to true in the spring bean that creates the object store. This is already supported in the new Database connector by using the ute-ddl message processor. Simply adding a test case to test that scenario. xpath function should not have any side effects on the message. ObjectStore is not expiring entries. Even though it's true that the code is not using the API correctly, I see that the monitoring thread is still not starting. Outbound endpoint fails to route when sending form-data to an endpoint that uses https protocol. Add selectors functionality on Watermark. , is it possible to convert this new feature to a story? I mean, a JIRA story type and format \"as a role I want behaviour so that I can business value\"?. Implement selectors functionality on watermark as described in. Implement new summary module for calculating aggregation functions over streams. Implement new module according to spec at. Cannot put a Foreach after an OAuth authorize. Add support for EE's Batch Module. Upgrade to Groovy. Upgrade Mule's Groovy dependency to Groovy. ", "contenttype": "application/json", "created": 737603, "id": 57, "language": "en", "user_name": "mariano.gonzalez", "email": "mariano.gonzalez@mulesoft.com"}]}