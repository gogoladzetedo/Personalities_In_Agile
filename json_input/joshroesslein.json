{"contentItems": [{"content": "Implement at least:. h3. Acceptance Test Try moving the device around. No updates should be displayed. Click \"Toggle Move device and you should now see updates (x, y, z values). Click the toggle button again and the updates should stop. Repeat and verify.. Use the implementation matrix to see what's remaining (these are things that are not implemented but supported in Cascades): Implement at least: *. Use the implementation matrix to see what's remaining (these are things that are not implemented but supported in Cascades): Add at least: * (does not appear to be applicable in Cascades). Implement at least: *. Use the implementation matrix to see what's remaining: Implement at least: *. Implement basic Blob functionality: accessing data, getting size, appending, convert to string. Blobs are primarily used to wrap native data structures or sources (ex: file descriptor, image, buffers). The goal of this ticket is just implement the proxy front facing APIs. Internally it should be architected to support wrapping various data sources. For the initial implementation support \"buffer\" based blobs would be a good first step. Blobs are not creatable, but returns by various API methods in Titanium. For testing this ticket implement the method. This should return a Blob which should allocate a buffer and copy the data over. Blob streams and to image conversions will not be implemented at this time. Separate tickets for those will be created. h3. Acceptance Test Look into using the test in Anvil for Blobs. The test is currently very small, so try to improve it. Anvil may not run right now on BlackBerry, but we can just copy the test into an application for now.. BlackBerry: Simple TableViewRows. h3. Feature Implement TableViewRow proxies which support the simple row style. For simple rows (title, leftImage, etc) can probably use the Cascades This is already implemented for using plain objects for the data array. Developers should also be able to listen for click and swipe events on rows. h3. Acceptance Test 1. Download the test case which includes the resources. 2. Create a project with the resources and run the app. 3. A list of items should appear with title text and a left image. 4. After a few seconds the last item should change to a pear. 5. Try clicking various rows. The text should change to \"Click!\" for a few seconds. The text should revert back to its original value.. BlackBerry: ScrollView. As a developer, I want a view that provides a viewport of a content view that can be scrolled using gestures both horizontally and vertically. The existing Titanium API for this feature is Cascades does provide a control (ScrollView) which should meet the requirements for this view.. BlackBerry: ScrollableView. As a developer, I want a view that allows displaying a set of child views that can be navigated through by using swipe gestures. The existing Titanium API for this view is While Cascades does not provide a built-in control for this type of view, it does appear possible to implement our own custom control.. Implement the methods for accessing and modifying data within the clipboard. h3. Acceptance Test The three labels should display (in order from top to No custom text. * No custom blob. Click \"Set Text\" then restart the app. The first label should read \"Text Inserted!\" now. Close the app and open another app on the device (ex: browser). Copy some text into the clipboard. Relaunch the test case app and the first label should now contained the text you copied. Click \"Set Custom Data\" then restart the app. The second label should read \"Custom Text!\" and the third label \"Custom Blob!\". Click \"Clear Data\" and restart the app. The labels should be back to their initial values (step 1).. Implement the Gesture module. h3. Acceptance Test Rotate the device and flip it around. The first two labels should be equal and display the current orientation. Try shaking the device, nothing should happen. Click the \"Toggle Shake\" button and shake again. The background should flash yellow. Try clicking the \"Toggle Shake\" button and shake again. Nothing should happen.. Android: Upgrade V8 to. We should upgrade to a newer version of V8. One of the main new features that has been implemented is incremental GC. This also exposes some additional API that can help us better tune the GC. Targeting V8 version stable branch).. Windows appear to be leaking memory by not properly cleaning up after they have been closed. This only affects \"heavy\" windows that have their own activity. h3. Test Case: Opening a window and adding many child views. Run the application and click the button to open a window. Wait for an alert dialog to popup telling you its okay to back out now. Hit the back button to close out the window. Repeat this process. Expected: Memory usage should peak and remain steady. Actual: Memory usages constantly rises until out of memory crash occurs.. We need to bundle the new ACS module alongside the MobileSDK. Android may also require a second MQTT module that the ACS module will depend on. A brief overview for how this should work: will need to be updated so those zips are extracted and live in the top level directory of the MobileSDK zip. This will ensure that when the MobileSDK zip is extracted, the modules are installed in the system directory as well h3. Testing 1. Download the two modules attached to this ticket (ignore 2. Copy these two zips into 3. Run scons to build the SDK. 4. Extract the SDK zip in dist and verify the file structure in modules matches as described in this ticket (see comments).. h3. Original test case. A child element attached to a parent with an opacity of 0 is still visible, but should be hidden. h3. Child and Parent View w sliders to control opacity. Try adjusting the opacity of the parent and child views. The child's opacity should be properly composited with that of the parent. As you lower the opacity of the parent, the child should also become more transparent. But if you only lower the child's opacity, the parent should not be affected.. h3. Setting background on Root Window 1) Create project in TiStudio and replace with (or use attached Resources folder) 2) Launch application Expected: Image appears with a red background. Actual: Only image appears. (See screen shot) Note: Talked to Jon Alter about this. He says it isn't a major issue because he doesn't see a circumstance where someone would set the background this way. It is a parity issue. Setting the background this way works as expected on iOS devices. h3. Setting background on a view. Verify image is shown with a red background. Also verify background color changes when the state of the view changes (ex: focused, selected).. ", "contenttype": "application/json", "created": 737603, "id": 95, "language": "en", "user_name": "joshroesslein"}]}