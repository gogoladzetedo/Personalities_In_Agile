{"contentItems": [{"content": "Currently the following scenarios are not supported meaning that http requester and jms outbound endpoints will block, which in turn requires tuning.. Add support for non-blocking to JMS outbound request response endpoint. Mule has two ways of setting and accessing flow session variables. Both via message (old approach) and via event (new approach). Supporting both meant introducing some hacks to support this. Remove the API in message to set get these and the hack introduced, as well as update all uses. This work affects other things also, such as and dataType propagation.. Refactor MEL to operate on MuleEvent and update when message is mutated.. Refactor and to operate on MuleEvent. Add Attributes to MuleMessage and make MuleMessage extend TypedValue.. Remove annotations module. Now there is no longer a transient registry it is critical that we don't lookup objects in the registry in runtime per-message. Not doing so will cause an performance impact and also thread contention at higher concurrencies.. HTTP listener should ignore property as it is a header. is a header and therefore shouldn't really be used by HTTP listener if there is a property present in the outbound property scope to determine response streaming behaviour. Generally current behaviour is fine, but there is one case that is currently incorrect IMO. We shouldn't stream a String payload when the and outbound message properties are both present. AUTO Behaviour appears to be inconsistent with HTTP requestor because the presence of both headers results in no streaming with requestor, but streaming with listener*. dispose() should not be invoked if initialise() fails. At least thats how I believe it always worked. This change causes NPE's in dispose() in a lot of cases. Which results in much more verbose and confusing errores being logged.. Currently if you want to use a sync processing strategy in every flow it is necessary to configure it on every single flow in your app. Add a attribute to the element to define this once. Also, consider allowing a system property too. This would be useful for: - Alternative testing plans - Setting default per instance, in cloudhub maybe.. Upgrade to grizzly. See fixes includes multiple bug fixes plus two improvments I requested: 1) SNI Support out of the box with SSLFilter. 2) Mechanism to limit size of send queue and this direct memory use.. The server SSL certificate is not validated by requestor at all.. Java does not send SNI because of the the socket is created. While Java 7 supports the SNI extension with TLS it only uses it if the hostname is specified when the Socket is created rather than a InetAddress (it doesn't get hostName from InetAddress).. Inconsistent implementation of between listener and requestor.. There are a number of cases tested in where even when chunking is still used. In my mind it should be the \"AUTO\" mode that decided if it should use chunking based on i) payload type ii) presence of headers. If there is a mode called \"NEVER\", it should never do chunking otherwise this is On the other hand, currently throws an exception in this scenario. Update behaviuor so that in both cases: AUTO: - Chunking if payload is InputStream and no Content-Length header present. - Else delete header if present and log. ALWAYS: - Delete content-length header and log. NEVER: - Delete header and log.. Requests randomly fail (1 in 1M) with NPE, even at low 50. Ensure internal SEDA queues are bound by default to avoid. JMS transport should reuse instances by default. MEL expression using dot notation always returns null if first value at first access is null, even after value changes. Upgrade Http transport to use HttpClient v4 for improved outbound performance. I believe this was deliberate giving the user the option of having (or not) logging.. Exception thrown by one-way outbound endpont in a Catch ES causes infinite loop. We need to fix a concurrency Bug and Fix a bug with ASM optimizer when assigning new map entries. Blocked by:. APIkit REST Controller Resource. Upgrade Jackson to. should support synchronous use cases. ", "contenttype": "application/json", "created": 737603, "id": 58, "language": "en", "user_name": "dfeist", "email": "daniel.feist@mulesoft.com"}]}