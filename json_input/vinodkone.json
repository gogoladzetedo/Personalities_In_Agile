{"contentItems": [{"content": "pivot root is not available on PowerPC. Upgrade vendored Protobuf to. Implement partition tests for the HTTP Scheduler API.. Implement fault tolerance tests for the HTTP Scheduler API.. Update with agent flag.. Currently benchmark tests take a long time ( 5 hours). It would be nice to reduce the total time taken by the benchmark tests to enable us to run them on ASF CI. Command to run only benchmark tests. Enable benchmark tests in ASF CI. Create utilities for common shell commands used.. Create light-weight utor only and scheduler only mesos eggs. Agent should not return partial state when a request is made to state endpoint during recovery.. This script should do the following things 1) Apply a chain of reviews to a local branch 2) Push the commits upstream 3) Mark the reviews as submitted 4) Optionally close any attached JIRA tickets. Automate the process of landing commits for committers. Introduce sessions in HTTP Scheduler API. Implement that uses the Executor Library. HTTP requests with nested path are not properly handled by libprocess. Update scheduler library to send REQUEST call. Add a SUPPRESS call to the scheduler. Scheduler driver should send Call messages to the master. When schedulers start interacting with Mesos master via HTTP endpoints, they need a way to detect masters. Mesos should provide a master detection Python library to make this easy for frameworks.. Adding this handler lets master send Event messages to the library. See MESOS-2909 for additional context. This ticket only tracks the installation of the handler and maybe handling of a single event for testing. Additional events handling will be captured in a different ticket(s).. Create the basic infrastructure to handle scheduler endpoint. Observed this on internal CI. Master should validate tasks using oversubscribed resources. Current implementation out for only supports setting the priority of containers with revocable CPU if it's specified in the initial utor info resources. This should be enforced at the master. Also master should make sure that oversubscribed resources used by the task are valid.. The simplest way to add support for oversubscribed resources to the allocator is to simply add them to the already existing and variables. It is easy to distinguish the revocable resources by doing a .revocable() filter.. Update DRF sorter to update total resources. DRF sorter currently keeps track of allocated resources and total resources, but there is no way to update the total resources. For we need the ability to update total resources because total oversubscribed resources change overtime.. Publish the schema for operator endpoints. We should define the schema of both requests and responses to the operator endpoints.. Add master flag to enable disable. Ideally this would be an example framework (or stand alone binary like load generator framework) that helps us evaluate in a real cluster. We need to come up with metrics that need to be exposed by this framework for evaluation how many revocable offers, rescinds, preemptions etc).. Add a new field to FrameworkInfo that lets the frameworks explicitly choose revocable offers (for backwards compatibility).. Slave should act on correction events from QoS controller. Slave might want to kill revocable tasks based on correction events from the QoS controller.. The CPU isolator needs to properly set limits for revocable and non-revocable containers. If we end up using different hierarchies for revocable vs non-revocable, this needs extensive testing to figure out the right knobs to use to minimize interference.. This is a component of the slave that informs the slave about the possible \"corrections\" that need to be performed shutdown container using recoverable resources). This needs to be integrated with the resource monitor. Need to figure out the metrics used for sending corrections scheduling latency, usage, informed by We also need to figure out the feedback loop between the QoS controller and the Resource Estimator.. Modularizing the resource estimator opens up the door for org specific Test the estimator module.. Slave should validate tasks using oversubscribed resources. The latest oversubscribed resource estimate might render a revocable task launch invalid. Slave should check this and send TASK LOST with appropriate REASON. We need to add a new REASON for this. Master will send separate offers for revocable and resources. This allows master to rescind revocable offers when a new oversubscribed resources estimate comes from the slave) without impacting regular offers.. Update Master to send revocable resources in separate offers. queued tasks. utor id is expected to be a string and not a complete json object. It should have the very same format as the tasks array on the same level. Example, directly taken from slave. The main feature of this release is going to be v1 (beta) release of the HTTP scheduler API (part of MESOS-2288 epic). Unresolved issues tracker:. +1 This echoes my comment at the very end of the doc. ``` Here's another (simpler) proposal? Can we just update the MasterDetector to try to parse the znode as json and if that returns an error try to parse it as proto? If we have that in we can have the master just write json in ```. Provide a Java library for master detection. When schedulers start interacting with Mesos master via HTTP endpoints, they need a way to detect masters. Mesos should provide a master detection Java library to make this easy for frameworks.. Implement the scheduler endpoint on master. Version the Operator Admin API. Move TASK LOST generations due to invalid tasks from scheduler driver to master. Add backoff to framework retries. To avoid so many duplicate framework attempts (and thus offer rescinds) we should add backoff to retries.. Task attempted to use more offers than requested in example jave and python frameworks. Add flags support for JSON. Master should disallow frameworks that reconnect after failover timeout.. Implement the protobufs for the scheduler API. Authorize task utor launches. Update semantics of when framework get called. ", "contenttype": "application/json", "created": 737603, "id": 54, "language": "en", "user_name": "vinodkone"}]}