{"contentItems": [{"content": "button in the UI continues to launch the job composition * Relevant unit tests included to simulate various scenarios. h2. Narrative As the system, I would like a way to launch a previously deployed job module from another job module. h2. Back story For the composed job story, we will have a driver job that consists of each step that represents the ution of a job. This story is the creation of a that will launch the child job, and upon it's completion, set the results of the driver's step to that of the slave job's results.. h2. Narrative As Spring XD, I will be able to launch Spring Boot jar files as Diego Tasks. h2. Back story The will be responsible for listening for launch requests, looking up the definition in the , and launching it. The first implementation of this would be a Receptor based. Provide the ability to chain jobs together via enhancing the DSL. The chain of jobs should be launchable as a single unit (filejdbc, mycustomjob, and jdbchdfs are all job modules):. h2. Narrative As a developer, I'd like a job module to be bootstrapped when the job is launched and shut down once it is complete instead of the current behavior of bootstrapping the context when the module is deployed regardless of if it's being used so that I can achieve better resource utilization. h2. Back story While streams are never ending, batch jobs have a true lifecycle with a beginning and and end. By having a job bootstrapped when it's not uting, it eats up precious resources. For example, if I have a job that creates connections to a database via a connection pool, the job module will hold those connections from the moment it's deployed to the moment it's undeployed, even if the job isn't being uted. A more efficient use of resources would be to have the job module provide just enough to receive the launch request and then bootstrap the job's context h2. Notes. h3. Narrative As a developer, I need to be able to create a Spring XD job module that consists of a job orchestrating the ution of other Spring Batch jobs using the Spring Batch Job Step (see section here: within the same module definition. h3. Acceptance Criteria Define the \"contract\" for a job module Currently the contract consists of a single job definition within the assembled (). The new version will need to document what job definition within the assembled should be run as the entry point. I'm assuming it would be by id ( for example) of the job but am open to other options. A custom job module that orchestrates multiple Spring Batch jobs via Job steps should be able to be deployed and uted as a single Spring XD module. Spring XD launches the job that conforms to the previously defined \"contract\". Spring Batch manages the ution of the child jobs. The existing OOTB jobs should work under the new \"contract\". h3. Assumptions The UI should \"just work\" in that child jobs update the job repository independently so no updates should be needed for an MVP of this functionality. h3. Out of Scope Execution of child jobs that are remote (deployed on another node ). Dynamically assembling jobs via the shell's DSL or the UI.. When deploying a batch job, the UI displays the database password found in the in plain text to the user. At the very least, this should be displayed in a password field so it's masked out and have it masked out in the resulting definition at the bottom of the page. Ideally, we wouldn't provide the password on that page at all and only accept overriding options (if the user wants a password other than the configured one, enter itotherwise, we'll use what we have). I'm finding that this occurs in other places as well. A full pass though of the UI should be done to mask out passwords (or eliminate their display all together).. There seems to be some inconsistency with the naming strategy for the named channels. For example: If we create a job \"j1\", the job launching request queue name in the message broker would . To send a launching request, we can either use or (both seems to work). If we create a stream with the named p2p channel \"foo\" we expect to use the syntax and the message broker will have the queue name The resolves the source sink channel names for tap to deduce the module index from the channel component: env) But, in case of the named channels that have prefix or their names are used as is the only exception in a case where (From tapAllowed) The above code makes sure, still points . We need some consistency when referring to the names of queues for the named channels above. Something like this: for job launching request queue and for the named p2p channel queue or, a better strategy the has consistency across the named channels.. h2. Narrative As an XD developer, I need to be able to use a batch job to stream data as a source. h2. Acceptance Criteria Implement the ability for a job to be defined as a source in the DSL Add the configurations for the batch infrastructure transparently to the user Add the ability to specify if the job is stateful (picks up where it left off if it stops or restarts at the beginning).. h2. Narrative As a user of XD, I want to be able to use a job as a source. To do so, we need the output of a job to be written to a message channel h2. Acceptance Criteria Create a new ItemWriter in the Spring Batch project to write to a Spring Integration message channel.. h2. Narrative As a developer, I need a way to deploy job configurations as well as the related custom code to XD. h2. Acceptance Criteria Provide the ability to register jobs that have been deployed as modules via something like where job is the name of the job definition located in modules job and myJob is the name of the resulting registered job Confirm that both \"regular\" jobs and Spring Hadoop based jobs can be packaged run.. h2. Narrative As the XD system, I need to be able to ute a job (or potentially a stream) based on a given condition (time, data existence, etc). This story is intended is for a local trigger implementation but remote triggers will also need to exist. h2. Acceptance Criteria Implement the ability to register a time based trigger for example Implement the ability to register a file existence based trigger for example Implement the ability to ute a job via an anonymous trigger: Implement the ability to ute a job via a job via the previously registered trigger:. ", "contenttype": "application/json", "created": 737603, "id": 10, "language": "en", "user_name": "mminella", "email": "mminella@gopivotal.com"}]}