{"contentItems": [{"content": "We already authorize which http users can update weights for particular roles, but even knowing of the existence of these roles (let alone their weights) may be sensitive information. We should add authz around GET operations on weights. Easy option: weights - Pro: No new verb - Con: All or nothing Complex option: - Pro: Filters contents based on roles the user is authorized to see - Con: More authorize calls (one per role in each weights request). For authorization based endpoint filtering we need to introduce the authorizer actions outlined via MESOS-4932.. Add authorization to agent's endpoint. Currently two formats of credentials are supported: JSON And a deprecated new line file: We deprecated the new line format in and should remove it after the deprecation cycle ends.. To protect access (authz) to master agent logs as well as utor sandboxes, we need authentication on the files endpoints. Adding HTTP authentication to these endpoints is a bit complicated since they are defined in code that is shared by the master and agent. While working on MESOS-4850, it became apparent that since our tests use the same instance of libprocess for both master and agent, different default authentication realms must be used for master agent so that HTTP authentication can be independently for each. We should establish a mechanism for making an endpoint authenticated that allows us to: 1) Install an endpoint like , whose code is shared by the master and agent, with different authentication realms for the master and agent 2) Avoid hard-coding a default authentication realm into libprocess, to permit the use of different authentication realms for the master and agent and to keep concerns from leaking into libprocess Another option would be to use a single default authentication realm and always enable or disable HTTP authentication for the master and agent in tests. However, this wouldn't allow us to test scenarios where HTTP authentication is enabled on one but disabled on the other.. Now that the master (and agents in progress) provide http authentication the registrar should do the same. See. Add authentication to libprocess endpoints. In addition to the endpoints addressed by MESOS-4850 and MESOS-5152, the following endpoints would also benefit from HTTP Adding HTTP authentication to these endpoints is a bit more complicated because they are defined at the libprocess level. While working on MESOS-4850, it became apparent that since our tests use the same instance of libprocess for both master and agent, different default authentication realms must be used for master agent so that HTTP authentication can be independently for each. We should establish a mechanism for making an endpoint authenticated that allows us to: 1) Install an endpoint like , whose code is shared by the master and agent, with different authentication realms for the master and agent 2) Avoid hard-coding a default authentication realm into libprocess, to permit the use of different authentication realms for the master and agent and to keep concerns from leaking into libprocess Another option would be to use a single default authentication realm and always enable or disable HTTP authentication for the master and agent in tests. However, this wouldn't allow us to test scenarios where HTTP authentication is enabled on one but disabled on the other.. Remove internal usage of deprecated ACL. should include fine-grained. Document: Mesos Executor expects all SSL * environment variables to be set. Review & Approve design doc. Reliably report utor terminations to framework schedulers.. Now that utor terminations are reported (unreliably), we should investigate queuing up these messages (on the agent?) and resending them periodically until we get an much like status updates do. From MESOS-313: The Scheduler interface has a callback for utorLost, but currently it is never called.. Root tests failing everywhere.. Running `sudo make check` on CentOS for Mesos causes several several. Failing ROOT tests in on CentOS. If I set on the master, framework and slave authentication are allowed, but not required. On the other hand, http authentication is now required for authenticated endpoints (currently only ` shutdown`). That means that I cannot enable framework or slave authentication without also enabling http endpoint This is undesirable. Framework and slave authentication have separate flags and to require authentication for each. It would be great if there was also such a flag for http Or maybe we get rid of these flags altogether and rely on ACLs to determine which principals are even allowed to authenticate for each. Include ExecutorInfos for custom utors in. After a series of ping-failures, the master considers the slave lost and calls shutdownSlave, requiring such a slave that reconnects to kill its tasks and re-register as a new slaveId. On the other side, after a similar timeout, the slave will consider the master lost and try to detect a new master. These timeouts are currently hardcoded constants (5 * 15s), which may not be well-suited for all scenarios. - Some clusters may tolerate a longer slave process restart period, and wouldn't want tasks to be killed upon reconnect. - Some clusters may have higher-latency networks or for volunteer computing efforts), and would like to tolerate longer periods without communication. We should provide on the master to control its tolerance for slaves, and (less importantly?) on the slave to tolerate missing masters.. ", "contenttype": "application/json", "created": 737603, "id": 46, "language": "en", "user_name": "adam-mesos", "email": "adam@mesosphere.io"}]}