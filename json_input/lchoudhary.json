{"contentItems": [{"content": "to reproduce: 1. Make sure you have android SDK tools rc10 installed. 2. Build for android x86 emulator or Results: 1. The emulator launches but studio keeps on waiting for the emulator to be ready. 2. On looking inside run device in studio you see the emulator as a attached ). 3. Running \"appc ti info -t android\" you see the emulator in devices attached). 4. Running \"appc ti info -t android\" with SDK tools you do not see the emulator in devices attached). 5. This is only seen for x86 & x86 emulators Results: 1. The emulator should not be detected as a device.. to reproduce: 1. Create a defaut alloy or clasic app. Make sure you have services enabled. 2. Using the components & SDK in the description build for android 3. Let the app launch. Results: 1. The app crashes 2-3 seconds after launch with error: 2. This might be due to the fact that the class is removed as a part of the google security fix. 3. When built with SDK & this issue is not seen. Results: 1. The app should not crash.. module folder exists outside the modules iphone folder in the titanium folder along with rogue MACOSX folder after installing SDK. To Reproduce: 1. Install SDK 2. Go to your titanium folder. Results: 1. You see & a rogue folder \" MACOSX\" in the titanium folder. Results: 1. The module should be inside 2. The \" MACOSX\" folder should not exist.. To Reproduce: 1. I followed the docs here : 2. Use the code below: 2. Check the bordercolor & of the cardview. Results: 1. We do not see the bordercolor & Result: 1. We should see the bordercolor & the for the cardview.. 1. does not have code which implements the asking for permissions on launch. 2. We have to manually enable permissions from settings. 3. Update Kitchensink to support the new android permissions model.. To Reproduce: 1. Use the code below in your 2. Build for android 3. After the app launches tap on the button & the window & check if you see logs in the studio console. Results: 1. No logs are seen on studio console from android Results: 1. We should see logs from android on studio console.. To Reproduce: 1. Create a default classic app. 2. Build for windows with cloud module 3. Let the app launch. Results: 1. We get application error: 2. Removing the ACS injected code while creation, we don't see this issue. 3. Might be this caused this issue: Results: 1. The classic app should launch without any application errors.. 1. Create a default classic app with SDK 2. Build for 3. Let the app launch. Results: 1. After launch the app throws runtime error: 2. This issue is reproducible from appc CLI as well. 3. Attached screenshot for reference. Results: 1. The app should build successfully with no runtime errors.. Android: Build fails if Java is not installed. With the addition of android SDK in the android SDK manager, google also updated their android build tools to 23, android SDK platform tools to 23 & android SDK tools to We need to update the in the SDK for android so as to include these new versions of android tools. Also, the latest version of android NDK release in May 2015 is \"10e\" but the package json says the max is \"r9\" & this needs to be updated as well. Current versions in. To Reproduce: 1. Create a default classic & alloy app. 2. Add this to the so that we know for sure we are building for API 23: 3. Build for android device running android preview final(from studio or appc CLI). Results: 1. The app crashes immediately when it try's to launch with errors: h5. Expected Result: 1. The app should launch fine & not crash.. Android : Build fails for android with ti CLI with error \"ti run exited with error code 1\". To Reproduce: 1. Create an app for android. 2. Build for android h5. Actual Results: 1. The build fails with error: Results: 1. The build should be successful.. - This is a regression. Works fine with build To Reproduce: 1. Create a default alloy or classic app for windows. 2. Build for windows device. Results: 1. The app launches, we see the appcelerator splash screen & the app crashes. 2. In the logs we get 3. We are not able to build for windows device because of this issue. Results: 1. The app should not crash after splash screen when launched on device & we should not see any errors.. To Reproduce: - You should have a space in your path leading to the app created in studio. does not have space in his path & he does not see this error. But the build fails for him too eventually. 1. Follow the process to package a window app to windows store from here : 2. Follow till step for \"Generate the Certificate\" & run as shown from the wiki. Result: 1. After entering the password info for the certs you will see the error as windows system window(not in the CLI). Screenshot attached for reference. - Clicking on OK continues with the build but fails at further stage. I am not sure if it fails due to the same reason. Results: should not get any error while packaging.. 1. The android M preview SDK is now out. 2. This new SDK is also marked as API 22. 3. While building its unclear if we are building with android M or android as both are API22. 4. Removing android & building fails with error: 5. From the above error we see that our tools don't consider android M as API 22 (although it will probably be API 23 once it goes GA). Please fix so that we can test android M till the time it is GA.. 1. The android L x86 64 bit emulator is the first 64 bit 6 will also be 64 bit). I am unsure if all apps built with titanium show this behaviour but, I have tried both the default apps (classic & alloy) along with kitchensink & all exibit the same behaviour. h6. 2. Installed a native app (made by wilson) & it works without any issues. (native app: attached) 1. Build a classic or an alloy default app to android L x86 64bit emulator. 2. Let the app launch on the emulator. Result: 1. The app launches but clicking on the app gives \"app has stopped responding\". 2. We get the following logs in android monitor: 3. Tried running kitchensink too & I see the same behaviour as default app. Result: 1. The app should not stop responding & work successfully.. h6. Our CLI automation tests caught this issue. Pretty neat. h6. Its confusing if its a regression as we never had android L support in so can't call this technically a regression. 1. Install SDK 2. Create a default app in studio. 3. Build for android emulator or device using studio CLI. Result: 1. The app fails to install and gives error: On device: On emulator: 2. On looking at the android manifest in the build folder we see: which means when the target sdk version is L it fails. 3. I tried by adding to the & the app installed without any issues. 4. Installing the app on android L preview works fine out of the box. Result: 1. The app should install on the successfully.. h5. Description: 1. Connect 2 iOS devices & build an app for any one of the 2 connected device. h5. Actual Result: 1. The app is built & installed on both the connected devices. 2. Command studio sends: This command above build's to both connected devices. 3. Using CLI we see the same issue. The app builds for both the devices. CLI log : h5. Expected Result: 1. The app should only be built to the selected device.. 1. Build an app for multiple IOS devices at the same time(I did on 2 devices) using the \"Run - On all IOS devices\" option in studio. or 1. Build an app for multiple IOS devices at the same time(I did on 2 devices) using the \"all\" flag for device id in CLI. h5. Actual result: 1. We get the error below & the build fails: h5. Expected Result: 1. The app should build successfully on all IOS the devices attached. CLI : Android: Ti SDK picks up the latest incompatible version of the map module. 1. If we try to build an app with map module & SDK it throws the following errors. 2. In order to make sdk pick up the right compatible module version which is change the change the minsdk to in the manifest file of map module 2. Use SDK and build the map again. Result: 1. The SDK should pick up map module as the latest compatible when its is rebuilt after changing the minsdk version in the manifest file, but rather it still picks up & throws errors as below: Result: 1. The SDK should pick up the latest compatible version of the map module build.. Android: 'longpress' event is not working in ListView. to reproduce: 1. Create an app and set a breakpoint in it. 2. Debug the app on android device. 3. After the app launches do the appropriate thing and make it hit the breakpoint OR just leave the app as is. 4. Do not terminate the debug process from studio. 5. Again launch the debugger without closing the app. 6. Notice after the app launches this time( It sometimes happens on the third debugger run). Results: 1. The app hangs on the splash screen. Results: 1. The app should not hang on the splash screen & should launch fully.. To Reproduce: 1. Download the installer for studio 2. Run the installer. 3. The installer will download the node installer & start the installation. 4. After the node installation observe the error. Results: 1. We see error mandatory prerequisite was not correctly installed\". Results: 1. We should not see any error & the node installation should be successful.. h5. Steps To Reproduce: 1. Create an app for android. 2. Select packaging option in studio 3. Click the play button. 4. Fill in all the necessary details for packaging like keystore password, distribution location etc. 5. Click publish. h5. Actual Result: 1. After clicking publish the studio android preferences window pops up. h5. Expected Result: 1. Clicking the publish button should package the app.. to reproduce: 1. Download the installers from beta stream from & jenkins. 2. Completed the studio installation. 3. Check the version of the installed studio. Results: 1. The installed version is NOTE: Updating previous studio from the stream & version in the zip is fine. h5. Expected Results: 1. The installed version should be. Appc CLI with latest master * Appc CLI with To Reproduce: 1. Using appc studio try to create a module(android or IOS). Results: 1. We can't create a module. 2. In studio logs we get: Results: 1. We should be able to create & IOS) from appc studio.. - I encountered this issue 3 times as of now in the past few days while testing for windows platform on windows enterprise 64 -bit. To Reproduce: 1. Build a windows app from studio multiple times. 2. Open windows task manager. 3. Observe the node processes. Results: 1. You will see that the node processes created as a result of building apps still linger & are not killed. 2. Some time these end up consuming lot of memory which cause performance degradation of the system. Results: 1. The node process should be killed & should not linger consuming memory.. 1. Create an app for windows platform. 2. Follow the steps to package a window app. Result: 1. The packaging dialog shows \"NLS missing message\". - Attached screenshot for reference. Result: 1. We should not see any \"NLS missing message\" on the packaging dialog.. h5. Steps To Reproduce: 1. Remove your android SDK from your system (delete the folder for mac). 2. Launch studio. 3. Go to studio dashboard. 4. You will see android sdk not configured. 5. Click to configure android SDK. 6. The \"Platform Configuration\" wizard will come up. 7. Click on \"settings\" for android. 8. You will see android SDK is selected. 9. Click on configure. h5. Actual Results: 1. The wizard will configure android SDK in the default location (even though it's not installed) & not download the android SDK. 2. De-select & again select android platform in the \"platform configuration \" wizard for android & click configure, it then gives you the license agreement & downloads the android SDK h5. Expected Results: 1. Studio should not detect android SDK installed & should download if not present.. Studio downloads android TV system image for android instead of the default mobile ARM image which fails to create the default emulator. Black line in the toolbar of appc studio. To Reproduce: 1. From the studio dashboard try to import samples & projects, create new project & play any videos. Results: 1. Nothing is responsive. No link works. Results: 1. The links on the studio dashboard should be responsive.. 1. You should have android L sdk installed. 2. Make sure you should not have any android emulators in the avd manager. 3. Launch appcelerator studio. 4. Now goto avd manager & check the default emulator created. result: 1. The android L x86 64 bit emulator is created by default. This should be avoided as this emulator has some issues on getting stuck on black screen & need some setting tweaks to make it work. Also it has a dependence on HAXM. 2. In the studio logs we see studio runs this command to create an avd: h5. Expected Result: 1. An arm or other x86 emulator having no dependencies or issues is created.. Redundant browse buttons exists for setting genymotion preferences in appcelerator studio. 1. For genymotion preferences in studio some of the browse buttons are redundant. 2. On MAC OSX: The browse buttons for genymotion path & genymotion player are redundant as the utables are inside the app contents of the & we can't browse to it using the browse button. 3. On Windows: The browse button for genymotion path is redundant as we are setting a path & not a path for an .exe file. For more info about genymotion preferences refer : h5. Expected Result: 1. The redundant buttons should be removed or replaced with an alternative.. Studio can't find java virtual machine on launch after install on a fresh windows machine. 1. Install the appcelerator studio version mentioned in the environment using the installer. 2. After the installation is complete launch studio. Result: 1. We get an error dialog saying \"java virtual machine can't be found\". Please refer the screenshot for the exact error message. Result: 1. We should not get any error dialog & studio should launch successfully.. 1. Download the appc studio installer mentioned above. 2. Start the installation. 3. Notice the name on the installer Result: 1. The name shows \" Appcelerator \" & not \"Appcelerator Studio\". Please refer the attached screenshot for reference. Result: 1. The name should show \"Appcelerator Studio\".. Appc studio installer showing incomplete studio name. \"Enable Javascript Minification\" is enabled for apps with services enabled. h5. This is a regression. We can see package options for module in studio created with sdk. 1. Create a module (any platform) with latest sdk or mentioned in the description. 2. After its created, try to package it. Results: 1. We do not see any options for packaging modules. All options are greyed out. This is only seen when the module is built with sdk in studio If we build a module with sdk in studio we can see packaging options. Result: 1. We should see packaging options for modules.. 1. Update your current studio to the latest studio 2. Run appcelerator studio. 3. Use it for sometime. Result: 1. Appcelerator studio is sluggish & consumes lot of cpu (more than 100%) & very frustrating to use with lot of freezes & delays. Results: 1. Appcelerator studio should not be sluggish & run smoothly.. h4. NOTE : This issue will affect a user if he is doing a clean install. The studio will not create a default emulator for him. 1. On windows, delete all available avd from the avd manager. 2. Run appcelerator studio. 3. Select an app & click refresh devices. h5. Actual Results: 1. A default avd does not get created by studio. This issue started after updating the android SDk tools & android sdk build tools to & respectively. We tested the same scenario on an windows machine which was not updated & everything worked fine as expected. NOTE: We saw that studio runs the command to create an avd in studio logs ,but somehow it fails I guess. If the same command is run manually it creates the emulator fine. h5. Expected Results: 1. Default avd should get created if none exist.. ", "contenttype": "application/json", "created": 737603, "id": 79, "language": "en", "user_name": "lchoudhary"}]}