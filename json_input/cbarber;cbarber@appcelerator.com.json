{"contentItems": [{"content": "There should be no \"rendering artifact\" between launch image file and first view. appcd: Add analytics facilities. The appc daemon needs to provide a mechanism for services and the daemon itself to generate analytics events. These events are then sent to the Appcelerator cloud so that the products can be improved. Analytics payloads must be anonymous. Analytics payload will include: Session ID Operating system Number of CPUs Installed appcd plugin info Event name Event metadata All events must be persisted to separate files disk prior to sending to the cloud. Only one process can send an event at any given time. The endpoint will be As a reference, here's Appc CLI's analytics library: Appc Daemon's guid: Preprod:. appcd: Integrate hook system into appc daemon. appcd: JSON response filtering. Windows: Cannot deploy app to Win 10 Mobile emulator. If you have a .png image in your Resources dir that is actually a .gif but with the wrong extension, pngcrush will blow up and the build will fail. Depending on your luck, you will either get no error or a file rename error. pngcrush returns 0 if crushing fails, which is probably a bug with pngcrush (or at least the one shipped with Xcode 7). The rename error happens because pngcrush take the input file and writes the crushed png to another file and the iOS build needs to rename it back to the correct filename. If the temporary crushed png image was never generated, then there's nothing to rename and then it blows up. It's worth noting that in Titanium SDK and older, the iOS build called . This is a perl script that converts plists into binary format and crushes pngs. The problem with this script is if pngcrush fails, it aborts the entire script and returns 0. This is bad. A) this potentially does not optimize several unprocessed PNG images and B) doesn't return an error code. So, this image optimization has been silently failing for years.. When you create a project and use or to use another directory then the default, the validation of the value will still check against the default workspace. Thus, if you already have a project (folder) with the requested name it will fail, even if the alternative workspace set via the option has not. Bug:. Bump master branch to. If any of the app icons are missing, then search for the and us it to generate missing app icons. You simply need to the base Builder object's method:. If any of the app icons are missing, then search for the and us it to generate missing app icons. You simply need to the base Builder object's method:. With the introduction of Asset Catalog support for app icons for iOS 9, we no longer use the and images other than to resize them to generate missing images. Furthermore, it build now requires or to be at least 180x180 pixels. Since this is sort of awkward change of behavior, it would be better to introduce a new image called that we use to generate all missing icons as well as the iTunesArtwork for iOS builds. Initially this would be implemented for iOS. Android, Windows, and Mobile Web support would be implemented in different tickets. Since the should not be apart of a built app, it must not go in the Resources directory and thus shall be searched for in the project root directory.. Cannot install a mobile app that contains a watchkit1 extension to an iOS device. This issue is also reproducible from Appc CLI. Create a Titanium App with Next, go into the project and create the Apple Watch App with Make sure the mobile app, watchkit app, and watchkit extension have the correct app ids: and Make sure you have development provisioning profiles for each app id with app group id enabled Make sure to app group capabilities is enabled in the watchkit extension target and watchkit app target Next, install the mobile app to an iOS device that is paired to a watch: Build will fail to install to device with the following error: Should be able to install a mobile app with watchkit extension.. Cannot install a mobile app that contains a watchkit1 extension to an iOS device. Description When building a tablet application the CLI requires the 180x180 iPhone 6s icon as flag is being used and pass in iPhone or iPad which now just map to ios. for this request Is it possible to have the TiSDK changed so that if the 180x180 icon is not present but the 152x152 icon is for a tablet app it will warn that the phone icon is not present but will proceed and make the needed tablet icons from the 152x152 icon. That or bring back the platforms flag and then let it check the assets based on that. -p, Target build platform: Supported values are android, ios, and mobileweb. (iphone and ipad are currently accepted as synonyms for We don't have 180x180 images in our tablet build specs so if that is a new requirement it will be a decent effort on our side to complete and its not needed by Apple. It doesn't seem like the appropriate solution. Output Currently we have the error as follows:. ti build is not working if project contains a watchapp extension. iOS: Configuring capabilities (app group) and team identity via. Generate a proof of concept for running Titanium API apps on Apple Watch using JerryScript as the JS engine. Ideally this would be able to leverage our existing iOS or codebase. Perhaps a HAL-equivalent on top of JerryScript that would require minimal work to have TitaniumKit to work on top (be able to swap between the two engines easily)? Github: Homepage: API:. When passing values using the shorthand flags such as you will still be prompted for the values, whereas when passing in . This only appears to be happening when using the Titanium CLI, when using the Appc CLI there is no prompting if these values are passed in. to reproduce 1. Run the following command result You will be prompted for the values result You should not be prompted for the values. Xcode 7 (beta 2) iOS 9 are unsupported. In order to aid in integration with the new methods for authentication in use by appcelerator CLI, some changes need to be made to the analytics and authentication in the Titanium CLI. 1) Pass token (process environment) to Titanium 2) Select a fixed User ID for PEM to handle analytics 3) Pass a new endpoint to return S3 bucket URL for future modification to registry URL 4) Stub login logout and make these no ops. The iOS and Android versions in node-appc are very old and The logic for these were moved into the Titanium SDK. These modules should be deprecated in node-appc. However, still references this old code when no Titanium SDK is for the Titanium 4 release: TIMOB-18352.. CLI: Add support for the Windows Store Package hook for Windows platform. This hook is in the file. This hook should copy the hook. It simply needs to sign the app and copy it to the output directory.. CLI: Add support for the Windows Phone Package hook for Windows platform. CLI: Add support for the Windows Store Run hook for Windows platform. This hook is in the file. This hook should copy the hook except there will be major changes to support winstore functions. This ticket is BLOCKED until windowslib has the ability to install Windows Store apps. The method implemented in windowslib works great for HTML5 apps that Windows Hybrid uses, but won't work for native Windows Store apps. However, windowslib should be able to launch and uninstall winstore apps.. CLI: Add support for the Windows Phone Run hook for Windows platform. The Android build does not properly convert the Android SDK L from the codename \"L\" to the version \"20\" which is causing emulator builds to fail saying the sdk is too old. Furthermore, the sorting of the Android SDKs is flawed and doesn't properly order SDKs based on the version. Instead it incorrectly uses the codename. Lastly, the vendor dependency versions needs to be bumped to add support for Android SDK 21 and Android Build & Platform Tools v21.. When using Titanium CLI on Windows or Linux and having a selected SDK or specifying of or older will cause all Titanium CLI commands to crash: To reproduce, install Titanium CLI on Windows or Linux, then run .. When building an iOS app for dist-appstore and you do not have any distribution certs, it does not properly error and exit the build. Instead it displays a message if is set, otherwise does not display an error. The build will continue and eventually die because is undefined: In theory the build will not properly error out when you don't have any keychains, you don't have the WWDR cert installed, there are no valid developer certs, there are no valid distribution certs, and no valid development provisioning profiles.. There's a bug in \"ti info\" when an invalid Titanium SDK is selected: Android SDK Android Executable SDK Path Android NDK NDK Path NDK Version r10 (64-bit). The app does not install to the first iOS device after the second iOS device is also attached in the system. This is a regression as the issue does not exist with SDK The issue occurs on CLI as well with SDK Steps to Reproduce: 1. Attach a development iOS device to the system. 2. For any mobile project, either install the project through studio or run the following cli command \"ti build -p ios -T device -C \" 3. The app gets installed successfully 4. Now plug in another iOS device to the system. 5. Again try to install the same project to the first device In CLI the build is successful but the process terminates without installing the app. In studio the installer process terminates after the console shows \" : Image optimization complete\" Note: If at this point we try to install the same app on device 2, it is successful. However, if we unplug and plug the device 1 again then it does not install on device 2 now but does so on device 1. In trying to reproduce this, there are times when the library fails to connect to the device or start the syslog relay service: There are also times when crashes with a segmentation fault.. validate NEW! post-compile exit, do not start adb (TIMOB-12034 CLI: Building for android with '-b' -build only flag starts the daemon & waits for the device after building the app) verify still exists wait for device if install fails with error adb uninstall the app, then try again (TIMOB-8665 Android: when installing different app with same app id) adb forward debugger and profiler. copy apk file output directory. Android Build: Package Hook. package assets (aapt package) create unsigned apk (basically a zip file) if (returned by dex command) does not exist in apk or has been updated, then write the to the apk file run jarsigner on unsigned apk zipalign signed apk. build generated classes (aka compile java source) add to classpath if production and proguard enabled, allow proguard to run (TIMOB-2782 Android: Generate Run a Proguard configuration based on API usage) build for all desired abis (TIMOB-15305 Android: Add x86 support to Distribution Build) make sure jars aren't included twice before running dexer (TIMOB-14963 Android: and return \"already added: run dexer. check if using a custom otherwise generate the if using make sure the correct permissions are added to the (TIMOB-5749 Android: not properly created when using events) if using custom write the default to a separate file. copy Resources directory (exclude all platform directories) load walk specified directory if file is a html file, scan for all tags and mark all URLs to the js minification exclusion list if file is a js file: keep track of what Titanium APIs are being used minify the .js files using UglifyJS instead of Closure Compiler (TIMOB-2662 android SDK \"Compiling Javascript Resources\" each time) (TIMOB-13974 Android: KS takes a long time to package - I've seen nine minutes, others report longer in some cases) if file is a drawable resources, copy it to the drawable directories allow either .jpg or .png files (TIMOB-6666 Android: Allow users to specify in place of else copy the file copy copy NOTE: be sure all files are merge such as res layout files (TIMOB-12372 Android: Layout resources in no longer work) same as copy Resources same as copy Resources. if force rebuild, remove build android if exists remove directories, if exists copy over files project NOTE: each of the files must be converted from mako templates to handlebars templates generate activities from write app modules to **. yes if flag is set yes if does not exist yes if app name changes yes if publisher changes yes if copyright changes yes if icon changes yes if guid changes yes if navbar-hidden changes yes if deploy type changes yes if list of modules change yes if any module's binary is changed (TIMOB-5837 Tooling: Adding a module requires a clean build) yes if Android target SDK version changes yes if any changes to activities in the Android in the ** yes if any jss files change. MobileWeb: option not properly toggling touch events for and ScrollableView. The Android environment detection library needs a few additional features for the build command to properly validate the development environment. detect abd location (TIMOB-2760 need to be able to ref adb from either tools or subdir) search configured Android SDK path first, then try ANDROID SDK environment variable (TIMOB-8658 Android: Switch search order of variables in check if ia32-libs package is installed (dpkg-query -l ia32-libs) (TIMOB-13520 Android Emulator: improve error message from missing ia32-libs dependency on linux) check if i386 architecture set in dpkg * detect Android SDK Home. We need an Genymotion library that provides the following functions: launch emulator. We need an Android emulator library that provides the following functions: improve emulator naming convention (TIMOB-1872 Android: Fix AVD naming scheme) make sure adb server is running if avd does not exist, create it custom launch params (TIMOB-2646 Android: Feature Request: Customized launch params) NOTE: do not launch a useless emulator, especially on Windows (TIMOB-4730 Android Simulator behavior on windows is very poor (not launched at all or useless emulator launched)) fire callback when emulator has booted fire callback when emulator is quit (TIMOB-12604 Android: Closing the emulator, 'Emulator has exited' log in not printed on console) kill emulator NOTE: make sure to support directories with &, especially on Windows (TIMOB-2527 Android: App launch build problem if ampersand in home folder name). We need an ADB library that provides the following functions: start-server install gracefully handle errors (TIMOB-14701 CLI: Android: For emulator builds, check that emulator has sufficient space) shell forward kill running app. CLI: Toast says android build succeeded when build failed. If a build fails, TiStudio still says it succeeded, console says (correctly) build failed. See screenshot. The problem is if the build callback receives an error, it says there was an error, but doesn't exit with a non-zero exit code.. CLI: building for Android device while the emulator open generates a wrong Error Message. h6. Problem Building for Android device from CLI, while the Android emulator open, generates an Error Message at the end. However the app is actually correctly installed. h6. Steps to reproduce 1. Be sure to have the Android Emulator open 2. Attach a device and build a project for the device from CLI: $ ti build -p android -T device Result: application is correctly installed on the device, however from console there is an Error message in the end. (also note the typo: \"appliation\" in the line). CLI: colors, lines, and messages ill-formatted with CLI enabled. CLI: Android: \"run\" hook for Android apps. CLI: Module Build. The task involves a few things before implementing the platform specific logic. h4. In the callback function, determine if the project is an app or a module. If the project has a , then it is an app. If the project has a , it is a module. When a module project is found, the should be parsed and saved into the variable. If the the project is neither a app or module, error and exit. You should set the to the appropriate value. Remember that you need to scan up the directory tree since the may be a subdirectory. In the function, if it is an app, then do the and stuff. If it is a module, then validate module stuff. In the function, I think you only need to call for apps. The should be for apps and for modules. If file does not exist, error and exit. h4. Add to the function after the line.. CLI: Implement \"export\" command. Exports a project to a standalone project without any dependencies on Titanium. The arguments will be similar to the build command.. CLI: \"build\" command for Android apps. Port the Python-based Android to Portions of this has already been completed. h3. Build Process fire event fire event Init the build android directory and files (TIMOB-14976) make sure adb server is running (adb lib does this for us) detect if app is already installed (adb lib does this for us) determine Google APIs are required (true unless not build only and building for emulator running non-Google API AVD) generate with contents of generate aidl support to localize app name (TIMOB-2824 Android: App name localization) generate remove duplicate res in xml files??? if not and not package build, push to gracefully handle timeouts (TIMOB-11827 Android: Installing an app to Android with version takes long time) fire event Package Hook (TIMOB-14981) logcat delete unused convert default \"dark\" splash screen to a red-based one (TIMOB-4517 Android: file is a gray image, should be the red default image) TIMOB-339 Android: Missing Icons remove dependency on old Android SDKs (TIMOB-13983 Android: Titanium should use the latest stable Android SDK and NDK and not depend on API 8). Android: Build should accept an alias password. h2. Error Message: h2. Version Info: Android SDK r8 and r9 h2. Repo Steps: Add attached to the Resources directory Error occurs here Remove from Resources directory Compiler error still occurs* It appears that the entire titanium mobile project is trashed from this point and will not recompile again. Edit: fixed the formatting. Googled and found that spaces in the Java paths would create complications: We moved the JDK location to and it appeared to work fine after updating JAVA HOME and the Path environment variables to the new location.. This will decrease the final APK size, improve performance, and further obfuscate bytecode. More info here:. Android: Generate a Proguard configuration based on API usage. Hi, I am developing Android application using Titanium. Earlier i was using and i tried solution provided here: Now i am getting following error Suggest Something ASAP. Regards, Rahul. With SDK older than when Ti developer \"Launch\" button is clicked, application is immediately displaying in the emulator: With & each time I get a \"compiling Android Resources\":. It might be a good space saving measure to strip debugging symbols from our JARs when building apps for production mode. The biggest implication this has is not having line numbers in stack traces from production apps.. Before all of our new changes for stylesheet and code generation we knew when new Java code was generated so we could skip the javac and dex parts of the APK building process. We need to go back through and make sure to only dex javac when necessary.. I found this bug while I created new release for Android Market. appversion is never changed from file (version tag). I send you patch to correct this, to apply on. Titanium SDK add support for building Titanium native modules via the CLI a while ago. It is suspected that Studio is still calling for Android modules and for iOS modules. These need to be updated to use the CLI. To build Android modules, simply run: For iOS modules, run: Things to note: The must be to the module's directory. The has been officially deprecated as of Titanium SDK and will be removed from new module projects in Titanium SDK possibly or * Refer to TIDOC-2470 for more details.. Studio: Project Nature - Project Nature is not set to mobile if you create an app from the CLI. Console build log needs to indicate which Titanium CLI is being called. Xcode : Distribute Ad hoc Enterprise with 'ipa' format is throwing error. ", "contenttype": "application/json", "created": 737358, "id": 81, "language": "en", "user_name": "cbarber", "email": "cbarber@appcelerator.com"}]}