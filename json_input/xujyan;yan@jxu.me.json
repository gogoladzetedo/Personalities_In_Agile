{"contentItems": [{"content": "Unmount irrelevant host mounts in the new container's mount namespace.. So far AppC store is read only and depends on out of band mechanisms to get the images. We need to design a way to support fetching in a native way. As commented on MESOS-2824: It's unacceptable to have either have: the first task that uses this image to be blocked for a long time to wait for the container image to be ready. The solution needs to enable the operator to prefetch a list of \"preferred images\" without introducing the above problems.. A few motivations: 1) Given the design in MESOS-3004 it became apparent that we need to support multiple images in a container and these images can be of different image types. (There are no sufficient reasons or major obstacles that force us not to allow it and it obviously gives the users more flexibility). 2) Also, even though we currently allow only one backend for each provisioner, when we update a running slave there can be multiple backends left in each container that we need to launch tasks with, or at least recover. We should evaluate in the future whether to support multiple backends and choose among them dynamically based on image 3) Since the rootfs' lifecycle tie with the running containers and should be cleaned up after containers die, it fits into the pattern of and we can manage them inside the work dir without needing to ask the operator to specify more flags.. Implement a 'read-only' AppC Image Store. It's going to be derived from this: (and other related patches) but in the initial 'read-only' version the store's content is prepared by mechanisms so the store component in Mesos only needs to provide access to images already in it and recover images upon slave restart. This greatly simplifies the initial version's responsibility and test cases. Features that fetch the images into the store will be added later and they will take into consideration its impact on task start latency and slave restart etc.. As I commented here: Currently is defined as the following message AppC In which the is a required field. When users specify the image in tasks they likely will not use an image id (much like when you use docker or rkt to launch containers, you often use or and seldom a SHA512 ID) and we should change it to be optional. The motivating scenario is that: if the frameworks in the Mesos use something like to run a task and defaults to , the operator can swap the latest version for all new tasks requesting . If they allow users to specify , they can swap the live version under the covers as well. This allows the operator to release important image updates security patches) and have it picked up by new tasks in the cluster without asking the users to update their job task configs.. It is useful for both appc and docker to compute and verify image hash.. In Resources JSON model() resources of the same name overwrite each other.. SIGSEGV received during. We saw a segfault in production. Attaching the coredump, we see: Core was generated by Program terminated with signal 11, Segmentation fault. 0 in free () from (gdb) bt 0 in free () from 1 in freeaddrinfo () from 2 in (hostname \"\", family 2) at 3 in dwarf expression opcode 0xf3 ) at 4 in main (). Create a protobuf for framework rate limit configuration and load it as JSON through master flags. Keep track of the principals for authenticated pids in Master.. Need to add a 'principal' field to FrameworkInfo and verify if the Framework has the claimed principal during registration.. Add counters for all messages from a scheduler on Master. is used identify one or more frameworks. If multiple frameworks use the same principal they'll have one counter showing their combined message count.. Looks like a SEGFAULT during shutdown.. ", "contenttype": "application/json", "created": 737603, "id": 56, "language": "en", "user_name": "xujyan", "email": "yan@jxu.me"}]}